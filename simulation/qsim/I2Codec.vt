// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/26/2014 15:53:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    I2Codec
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module I2Codec_vlg_sample_tst(
	clk,
	sda_o,
	suich,
	sampler_tx
);
input  clk;
input  sda_o;
input [17:0] suich;
output sampler_tx;

reg sample;
time current_time;
always @(clk or sda_o or suich)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module I2Codec_vlg_check_tst (
	clk_100,
	clk_200,
	sda_o,
	slc_o,
	sampler_rx
);
input  clk_100;
input  clk_200;
input  sda_o;
input  slc_o;
input sampler_rx;

reg  clk_100_expected;
reg  clk_200_expected;
reg  sda_o_expected;
reg  slc_o_expected;

reg  clk_100_prev;
reg  clk_200_prev;
reg  sda_o_prev;
reg  slc_o_prev;

reg  clk_100_expected_prev;
reg  clk_200_expected_prev;
reg  sda_o_expected_prev;
reg  slc_o_expected_prev;

reg  last_clk_100_exp;
reg  last_clk_200_exp;
reg  last_sda_o_exp;
reg  last_slc_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_100_prev = clk_100;
	clk_200_prev = clk_200;
	sda_o_prev = sda_o;
	slc_o_prev = slc_o;
end

// update expected /o prevs

always @(trigger)
begin
	clk_100_expected_prev = clk_100_expected;
	clk_200_expected_prev = clk_200_expected;
	sda_o_expected_prev = sda_o_expected;
	slc_o_expected_prev = slc_o_expected;
end



// expected clk_200
initial
begin
	clk_200_expected = 1'bX;
end 

// expected clk_100
initial
begin
	clk_100_expected = 1'bX;
end 

// expected slc_o
initial
begin
	slc_o_expected = 1'bX;
end 
// generate trigger
always @(clk_100_expected or clk_100 or clk_200_expected or clk_200 or sda_o_expected or sda_o or slc_o_expected or slc_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_100 = %b | expected clk_200 = %b | expected sda_o = %b | expected slc_o = %b | ",clk_100_expected_prev,clk_200_expected_prev,sda_o_expected_prev,slc_o_expected_prev);
	$display("| real clk_100 = %b | real clk_200 = %b | real sda_o = %b | real slc_o = %b | ",clk_100_prev,clk_200_prev,sda_o_prev,slc_o_prev);
`endif
	if (
		( clk_100_expected_prev !== 1'bx ) && ( clk_100_prev !== clk_100_expected_prev )
		&& ((clk_100_expected_prev !== last_clk_100_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_100 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_100_expected_prev);
		$display ("     Real value = %b", clk_100_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_100_exp = clk_100_expected_prev;
	end
	if (
		( clk_200_expected_prev !== 1'bx ) && ( clk_200_prev !== clk_200_expected_prev )
		&& ((clk_200_expected_prev !== last_clk_200_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_200 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_200_expected_prev);
		$display ("     Real value = %b", clk_200_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_200_exp = clk_200_expected_prev;
	end
	if (
		( sda_o_expected_prev !== 1'bx ) && ( sda_o_prev !== sda_o_expected_prev )
		&& ((sda_o_expected_prev !== last_sda_o_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sda_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sda_o_expected_prev);
		$display ("     Real value = %b", sda_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sda_o_exp = sda_o_expected_prev;
	end
	if (
		( slc_o_expected_prev !== 1'bx ) && ( slc_o_prev !== slc_o_expected_prev )
		&& ((slc_o_expected_prev !== last_slc_o_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port slc_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", slc_o_expected_prev);
		$display ("     Real value = %b", slc_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_slc_o_exp = slc_o_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module I2Codec_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg treg_sda_o;
reg [17:0] suich;
// wires                                               
wire clk_100;
wire clk_200;
wire sda_o;
wire slc_o;

wire sampler;                             

// assign statements (if any)                          
assign sda_o = treg_sda_o;
I2Codec i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_100(clk_100),
	.clk_200(clk_200),
	.sda_o(sda_o),
	.slc_o(slc_o),
	.suich(suich)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// suich[17]
initial
begin
	suich[17] = 1'b0;
	suich[17] = #1280000 1'b1;
	suich[17] = #98560000 1'b0;
end 

// sda_o
initial
begin
	treg_sda_o = 1'bZ;
	treg_sda_o = #21000000 1'b0;
	treg_sda_o = #1000000 1'bZ;
	treg_sda_o = #17000000 1'b0;
	treg_sda_o = #900000 1'bZ;
	treg_sda_o = #17100000 1'b0;
	treg_sda_o = #980000 1'bZ;
end 

// suich[0]
initial
begin
	suich[0] = 1'b0;
end 

// suich[1]
initial
begin
	suich[1] = 1'b1;
end 

// suich[2]
initial
begin
	suich[2] = 1'b0;
end 

// suich[3]
initial
begin
	suich[3] = 1'b1;
end 

// suich[4]
initial
begin
	suich[4] = 1'b0;
end 

// suich[5]
initial
begin
	suich[5] = 1'b1;
end 

// suich[6]
initial
begin
	suich[6] = 1'b0;
end 

// suich[7]
initial
begin
	suich[7] = 1'b1;
end 

// suich[8]
initial
begin
	suich[8] = 1'b0;
end 

// suich[9]
initial
begin
	suich[9] = 1'b1;
end 

// suich[10]
initial
begin
	suich[10] = 1'b1;
end 

// suich[11]
initial
begin
	suich[11] = 1'b0;
end 

// suich[12]
initial
begin
	suich[12] = 1'b1;
end 

// suich[13]
initial
begin
	suich[13] = 1'b0;
end 

// suich[14]
initial
begin
	suich[14] = 1'b1;
end 

// suich[15]
initial
begin
	suich[15] = 1'b1;
end 

I2Codec_vlg_sample_tst tb_sample (
	.clk(clk),
	.sda_o(sda_o),
	.suich(suich),
	.sampler_tx(sampler)
);

I2Codec_vlg_check_tst tb_out(
	.clk_100(clk_100),
	.clk_200(clk_200),
	.sda_o(sda_o),
	.slc_o(slc_o),
	.sampler_rx(sampler)
);
endmodule

